

@page "/students/details/{id:int}"
@inject IStudentService StudentService
@inject NavigationManager Nav
@using studentManagementSystem.Models.DTOs
@using studentManagementSystem.Services
@using studentManagementSystem.Models
@rendermode InteractiveServer

<h3>Student Details</h3>

@if (student == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <dl class="row">
        <dt class="col-sm-2">Name</dt>
        <dd class="col-sm-10">@student.Name</dd>

        <dt class="col-sm-2">Email</dt>
        <dd class="col-sm-10">@student.Email</dd>
    </dl>

    <h4>Enrollments</h4>
    @if (enrollments == null || enrollments.Count == 0)
    {
        <p>No enrollments found.</p>
    }
    else
    {
        <table class="table table-striped table-dark">
            <thead>
                <tr>
                    <th>Course</th>
                    <th>Grade</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var enrollment in enrollments)
                {
                    <tr>
                        <td>@enrollment.Course.Title</td>
                        <td>@(enrollment.Mark?.ToString() ?? "Not graded")</td>
                    </tr>
                }
            </tbody>
        </table>
    }

    <button class="btn bg-danger-subtle rounded-0" @onclick="@(() => Nav.NavigateTo($"/students/edit/{id}"))">Edit</button>
    @* <a href="/students/edit/@id" class="btn bg-danger-subtle rounded-0">Edit</a> *@
    <button class="btn bg-secondary rounded-0" @onclick="@(() => Nav.NavigateTo("/students"))">Back</button>
    @* <a href="/students" class="btn bg-secondary rounded-0">Back</a> *@
}

@code {
    [Parameter] public int id { get; set; }
    private StudentDto? student;
    private List<StudentCourse>? enrollments;
    private string? errorMessage;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            student = await StudentService.GetByIdAsync(id);
            var fullStudent = await StudentService.GetAllWithEnrollmentsAsync();
            var studentWithEnrollments = fullStudent.FirstOrDefault(s => s.StudentId == id);
            enrollments = studentWithEnrollments?.StudentCourses.ToList();
        }
        catch (Exception ex)
        {
            errorMessage = "An error occurred while loading student details.";
            Console.WriteLine($"Error: {ex.Message}");
        }
    }
}